day05
grant all on bbsdb.* to tom@"%" identified by "123456"
1.tom能赋予其他人的权限，不能大于自身的权限
2.若tom--->bbsdb.*----无法付给jerry bbsdb.*---->无对mysql.user的写入权限，且无   
  with grant option

#################################################################

数据的备份与恢复：
物理备份：直接拷贝库和对应的文件系统文件
备份：
cp /-rp /var/lib/mysql
cp /-rp /var/lib/mysql/mysql(授权数据)   /opt/mysql.bak
***注意：innodb引擎的不适合，有事务日志，恢复会对不上,适合myisam

恢复：将其传给对应的机子
stop服务
cp /opt/mysql.bak  /var/lib/mysql/mysql    考到相应的目录下
chown -R mysql:mysql /var/lib/mysql/mysql  一定更改目录下的所有者与所属组
重启mysql

简单
完全拷贝，暴力覆盖，跨平台不好
####################################################################
逻辑备份（生产环境下常用）：
备份时，根据备份的库与表，产生对应的sql命令。把sql命令存储到对应的文件里，恢复即为将保存sql命令在恢复一便
完全备份/恢复：一台服务器上的所有数据
		一个库/一张表

备份新产生的数据：
差异备份： 备份完全备份后的所有新产生的数据(差异备份有数据冗余与版本跟踪，但效率低空间大)
增量备份： 备份上一次备份的所有新产生的数据（效率高，占空间小，但每次无冗余，可额外每次再备份一份）
生产环境下，对数据作备份的方法
1.在脚本中作写备份脚本 （shell python go ruby）
2.搭建mysql主从结构实现数据的自动备份

使用脚本备份时对数据要考虑的问题
备份频率：取决于数据量产生速度，业务增长率
备份策略：完全+增量/完全+差异
备份时间 :每周一次完全，每天增量
备份文件名：日期_XX.sql
存储空间   : lv + raid

数据备份操作：
mysqldump:
mysqldump -uroot -p123456 user > user.sql(备份时默认存到当前)
				库.表	  /opt/mysql/user.sql（备份到该路径下）
				-A（备份所有）
				-B （多个备份到一个文件中）
mysqldump -uroot -p -B db2 db4 > /opt/mysql/twodb.sql

恢复
方法一：
mysql -uroot -p123456  db1   <   /opt/mysql/db1.sql
                           恢复的库名      备份的对应文件
有-B的备份文件不需要指示库名
单独备份的表或者库，需要指示库名

方法二：
mysql 中建立一个库，并进去
再库下使用:source /opt/mysql/db1.sql
create database db5;
use db5
source /opt/mysql/db1.sql

##################################################

1.启用mysql服务的binlog日志，实现增量备份
增量备份：
binlog日志（二进制日志）：
记录除查询之外的sql命令
………………………………………………………………………………
使用binlog日志的sql命令恢复操作的命令以及文件
………………………………………………………………………………
show variables like "binlog_format";

statement :每一条修改数据的 sql 命令都会记录在 binlog 日志中。
row: 不记录 sql 语句上下文相关信息,修改日志记录格式仅保存哪条记录被修改
mixed: 是以上两种格式的混合使用


手动创建新log文件
>flush logs;
>mysql -uroot -p123456  -e "flush logs"
>mysqldump -uroot  -p123456 -flush-logs 库名 >  XX.sql
>systemctl restart mysqld
默认编号最大的使用
>show master status;查看正在使用的log日志；



改配置文件：
[mysqld]下增加
server_id=50
log-bin
binlog_format="mixed"
重新启动服务
在/var/lib/mysql/-----有对应的文件：50-bin.index（索引），50-bin.000001
mysqlbinlog 50-bin.000001 | grep create--->在里面查询相关的操作记录

自定义存储目录与文件名
log-bin=/logdir(路径)/mysql（命名）

记录命令的方式：
偏移量：# at 378
时间：#180622 15:23:55 server id 50  end_log_pos 482 CRC32 0xc0854d84 	Query	t

日志命令查询：
mysqlbinlog 选项 日志文件  | mysql -uroot -p123456----> 管道给命令再执行一遍
mysqlbinlog 50-bin.000001 --start-position=偏移量的数值

查询日志的时间：起始时间---结束时间 | mysql -uroot -p123456 执行时间端内的sql命令，恢复之前的文件
mysqlbinlog --start-datetime="yyyy-mm-dd hh:mm:ss"  --stop-datetime="yyyy-mm-dd hh:mm:ss" | mysql -uroot -p123456

##############################################################
sql命令删除
>show binary logs;查看当前log占用空间
手动删除：
>purge master logs to 'mysql-bin.0000021';删除000021以前的log
                   before date_sub
>reset mater;  删除当前所有文件重新生成第一个
自动删除：
>set global expire_logs_days = 5
> flush logs   刷新
改配置文件：
为保证在MYSQL重启后仍然有效，在my.cnf中也加入此参数设置
expire_logs_days = 5


############################################################
2.安装第3方软件，提供innobackupex命令作增量备份
在线热备份，不锁表
xtrabackup (不能备份innodb) innobackupex(都可以)
安装相应的包 percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
……………………………………………………………………………………………………………………………………………………
完全备份：
innobackupex --user root --password 123456 /backup(新文件或不存在) --no-timestamp（不生成时间戳）  ----备份所有
#innobackupex --user root --password 123456 --databases =" 库名.列表 " /fullbak --no-timestamp ---指定备份库名列表
完全恢复：
完全恢复数据，要求还原时数据库目录是空-------重作日志（--apply-log）------恢复数据(--copy-back)------重启数据库服务
所以需要备份时将mysql中的四个默认配置文件库也备份
rm -rf /var/lib/mysql/*
innobackupex --user root --password 123456 --apply-log /backup (同步（重作）日志)
innobackupex --user root --password 123456 --copy-back /backup （恢复数据）
chown -R mysql:mysql /var/lib/mysql   (mysql赋权限)
start mysqld  （启动服务）

…………………………………………………………………………………………………………………………………………………
增量备份：
第一次增量备份：
#innobackupex --user root --password 123456 --databases =" 库名列表”\
 --incremental /new1(增量文件目录) --incremental-basedir=/fullbak(原来的完全备份目录)\
 --no-timestamp
再次备份：
#innobackupex --user root --password 123456 --databases=" 库名列表 "\
 --incremental /new2(新的文件目录) --incremental-basedir="/new1"\（上次的文件目录）
 --no-timestamp

数据库中
ib_logfile0----执行后成功的
ib_logfile1
ibdata1 -------未提交的
LSN--日志序列号

备份文件中的日志信息（有序列号范围，类型）----->存放在xtrabackup_checkpoints中
cat /new1bak/xtrabackup_checkpoints
含.mete文件----增量文件

增量恢复：完全备份的文件--------(增量new1)------>新合并的文件————(增量new2）——————>新合并的文件
增量备份目录名       --incremental-dir=备份目录名
重做并合并日志 --apply-log  --redo-only


清空数据库服务 
停止服务
恢复数据
启动服务

***注意：必须按顺寻依次合并重做备份文件，否则断片会报错****
***合并后的总备份文件为最近的文件，其他之前未合并的文件可以不用了，再使用增量备份也用最近的文件作为上一次的文件目录****


#innobackupex --user root --password 123456 --databases="db1.a" --apply-log --export /allbak
alter table db1.a import tablespace; // 导入表空间

###############################################

表的恢复步骤：  ***注意：只限于innodb引擎创建的表****
从备份数据里找出表信息：
创建删除的表（表结构与删除的时候相同）
删除表空间（要用备份的表覆盖之前的表）
把导出的表信息的文件，拷贝到数据库目录下

#####################################################
innobackupex --user root --password 123456 --databases="db1" /allbak --no-timestamp    ----------先前已经备份号数据
发生误删除表：drop table a;
表恢复
innobackupex --user root --password 123456 --databases="db1" --apply-log --export /allbak  --------导出备份库
>create table db1.a(id int);         -------创建要恢复的表结构
>alter table db1.a discard tablespace;   ---删除表空间
cp /allbak/db1/a.{ibd,cfg,exp}  /var/lib/mysql/db1   ---将备份文件考入mysql目录下的对应位置
chown mysql:mysql /var/lib/mysql/db1/a.*          ------权限设为mysql
>alter table db1.a import tablespace;           ------导入表空间

表空间文件（.ibd文件）
表结构文件.frm
#################################################################

计划任务：
23 00 * * 1 /bin/allbak ----->周一完全备份
23 00 * * 2-7 /bin/newbak ------>周2-7增量备份
performance_schema-----存放表.图
sys----系统运行的文件 

