mysql-day03
一、mysql存储引擎
1.1  存储引擎介绍
1.2  查看数据库服务支持的存储引擎有那些？
1.3  查看已有的表使用的存储引擎
1.4  修改数据库服务默认使用的存储引擎
1.5  修改表使用的存储引擎，或 建表时指定表使用的存储引擎
1.6 常用存储引擎的特点
1.7 建表时如何决定表使用那种存储引擎
1.8 工作中怎么决定数据库服务器使用那种存储引擎

二、数据导入导出（批量操作数据）
2.1  数据导入的命令格式及数据导入时的注意事项

查看导入文件内容时，默认在系统的什么目录下搜索文件？
mysql>  show variables    like "secure_file_priv";

命令格式？
LOAD  DATA   INFILE  "目录/文件名"   
INTO  TABLE   库.表

FIELDS TERMINATED   BY  "列间隔符号"  
LINES TERMINATED BY  "\n"


修改导入文件内容时，默认搜索文件的目录？

]#vim /etc/my.cnf
[mysqld]
secure_file_priv="/mysqldata"
:wq
]# mkdir -p   /mysqldata
]# chown   mysql  /mysqldata
]# setenforce  0
]#  systemctl   restart  mysqld

2.2  数据导出的命令格式及数据导出时的注意事项
数据导出： 把表记录存储到系统文件里
注意事项？

命令格式
sql查询命令   into  outfile   "目录/文件名" [  FIELDS TERMINATED   BY  "列间隔符号"   LINES TERMINATED BY  "\n" ]；


三、管理表记录
插入记录 insert  into （值要与字段类型和约束条件匹配）

插入1条记录给所有字段赋值
insert  into  库.表     values(字段值列表);

插入N条记录给所有字段赋值
insert  into  库.表     values(字段值列表)，(字段值列表);

插入1条记录给指定的字段赋值
insert  into  库.表（字段名列表） values(字段值列表);

插入N条记录给指定的字段赋值
insert  into  库.表（字段名列表） values(字段值列表)，(字段值列表);

+++++++查看记录
#命令格式
select   字段名列表  from  库.表   where    匹配条件；

#查看表中所有行的所有字段的值
select   *  from  库.表  ； 

# 查看表中所有行的指定字段的值
select  字段名1，字段名2 ，字段名n  from  库.表  ；

#查看指定行的指定字段的值
select  字段名1，字段名2 ，字段名n  from  库.表  where    匹配条件 ； 


-------修改记录字段的值

#修改所有记录指定字段的值
update   库.表  set  字段名=值，字段名=值；

#修改与条件匹配的记录指定字段的值
update   库.表  set  字段名=值，字段名=值  where    匹配条件 ；


-------删除记录
#删除表中的所有行
delete  from   库.表；

#仅删除与条件匹配的记录
delete  from   库.表  where    匹配条件 ；

##############################################################

四、匹配条件（查看 修改 删除记录时可以加条件）
-------------查看 修改 删除   from   库.表  where    匹配条件 ；

数值比较   字段名   符号    数字
=   !=   <   <=      >     >=

select uid,password from user where uid<10;
update user set password="F" where uid<10;
select uid password from user where uid < 10;

字符比较   字段名   符号    “字符串”
=   !=

select name,shell from user where shell != "/bin/bash";
select id,name,shell from user where name="mysql";

范围内比较   
字段名  between  数字1  and  数字2         在...之间...
字段名   in  (值列表)                                  在...里
字段名   not  in   (值列表)                         不在...里

select name,uid from user where uid in (10,12,14,16,28);
select name,uid from user where uid between 10 and 30;

4.4逻辑比较（就是有个查询条件）
逻辑与 and            多个条件同时成立    才匹配
逻辑或   or             多个条件,某一个条件成立  就匹配
逻辑非  ！ 或 not    取反  

select name,uid from user where 
name="root" and uid=1 or uid =3;---------->name="root",uid=1的，或者uid=3的
name="root" and （uid=1 or uid =3）;------->name="root",且uid=1或3的。先执行（）中的判断，在执行括号外的判断

select name, uid from user where name ="root" and (uid=0 or uid =3);




4.5  匹配空     字段名  is  null
       匹配空     字段名  is  not  null
	
######################################################
高级查询：

4.6 模糊匹配
字段名  like   '表达式';
%   表示零个或多个字符
_    表任意一个字符

select name from user where name like '___' and uid between 10 and 90;

select id,name,uid from user where name like = '%'
注意：若筛选的内容是mull 则----->like ='%'不匹配（只匹配0个或多个字符，而null不是0字符,若是''则可以）

4.7 正则匹配(同shell)
字段名  regexp   '正则表达式';
^   $    .（作用同?）    *   [  ]
select name from user where name regexp 't$';
select name from user where name regexp '^..[0-9]';

4.8 四则运算(select 和 update 操作是可以做数学计算)
字段类型必须数值类型（整型 或浮点型）
+   -   *     /      %

select name ,(uid+gid)/2 as pjz from user where  name regexp '^r.*t$';


4.9聚集函数（对字段的值做统计，字段的类型要求是数值类型）
count(字段名）统计字段值的个数
sum(字段名）  求和
max(字段名）  输出字段值的最大值
min(字段名）  输出字段值的最小值
avg(字段名）  输出字段值的平均值


4.10  查询不显示字段重复值  
distinct 字段名
select distinct shell from user;--->列出user中使用哪些shell
select distinct shell from user where uid between 20 and 50;

4.11查询分组
sql查询   group   by  字段名；


4.12 查询排序 (按照数值类型的字段排队)
sql查询  order  by  字段名  asc|desc;
having 在查询结果中寻找有没有匹配信息
select id,name from user where name like '%' having name=null;在前面的筛选完成后，再执行having后的东西。

4.13 限制查询显示行数(默认显示所有查询的记录)
sql查询  limit  数字； 显示查询结果的前几行
sql查询  limit  数字1，数字2；  显示查询结果指定范围的行

select * from user limit 1,3;显示第2～4行

数据库的存储引擎
不同的引擎，存储方式，文件个数类型均不同

| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |

myisam特点：
一个表用三个文件存储，
.frm---->存储表结构  。MYD---->存储数据  .MYI---->索引
– 支持表级锁（给一张表全部加锁）
– 不支持事务、事务回滚、外键

innodb特点：
一个表用两个文件存储
.frm---->表结构    .ibd ----->索引与数据
– 支持行级锁定（给被访问的行加锁）
– 支持事务、事务回滚、支持外键    -----> 在事物执行中任意一步操作失败，恢复所有操作（如同转账）

####################################################
锁粒度
– 表级锁:一次直接对整张表进行加锁。
– 行级锁:只锁定某一行。
– 页级锁:对整个页面( MySQL 管理数据的基本存储单位)进行加锁。

• 锁类型（根据访问分）
– 读锁(共享锁):支持并发读。---------------------------------------->执行select操作时，n个客户端都可以查询（锁止的范围根据引擎来定）
– 写锁(互斥锁、排它锁):是独占锁,上锁期间其他-------------->执行insert update delete时
线程不能读表或写表。

执行查询多的表适合使用myisam----->锁整张表一次即可，节省资源
执行修改多的表适合使用innodb----->锁单行，可增大并发更改数，提高效率

################################################################

事务日志：（engine=innodb）
ibdata1    未提交的sql
LSN        日志序列号
ib_logfile0 已经提交的sql
ib_logfile1


ACID事务执行特性：
• Atomic :原子性
– 事务的整个操作是一个整体,不可分割,要么全部成功,要么全部失败。
• Consistency : 一致性
– 事务操作的前后,表中的记录没有变化。
• Isolation :隔离性
– 事务操作是相互隔离不受影响的。
• Durability :持久性
– 数据一旦提交,不可改变,永久改变表数据

show Variable like "%auto%";----查看自动提交功能
>set autocommit=off-------------关闭自动提交
手动提交需要每次打commit;表示提交
>rollback;(未提交sql，回稳命令)


